#include <stdio.h>
#include <stdlib.h>
#define MAX_VAL 200
#define MIN(a, b) ((a < b) ? a : b)

#define SIZE_MAT 3
int pivot_counter = 0;
void print_mat(double** mat){
    for (int i = 0; i < SIZE_MAT;i++){
        for (int j = 0; j < SIZE_MAT; j++){
            printf("%.3f ", mat[i][j]);
        }
        printf("\n");
    }
}

void canonize(double** mat, int rows, int cols, int pivot_row, int pivot_col){
    double k;
    for(int r = 0; r < rows; ++r){
        if(r == pivot_row){
            k = mat[pivot_row][pivot_col];
        } else {
            k = ((-1*mat[r][pivot_col])/mat[pivot_row][pivot_col]);
        }
        for(int c = 0; c < cols; ++c){
            if(r == pivot_row){
                mat[r][c] /= k;
            } else {
              mat[r][c] += (mat[pivot_row][pivot_col] * k);
            }
        }
    }
}


void maximize(double** mat, int rows, int cols){
  int min = MAX_VAL;
  int pivot_row = -1, pivot_col = -1;;

  for(int c = 1; c < cols-1; ++c){
    if(min > mat[0][c]){
      min = mat[0][c];
      pivot_col = c;
    }
  }
  if (min >= 0){
    return;
  }
  min =  MAX_VAL;
  int fraction;
  for(int r = 1; r < rows; ++r){
    if(mat[r][pivot_col] > 0){
      fraction = mat[r][cols-1] / mat[r][pivot_col];
      if(fraction < min){
        min = mat[r][pivot_col];
        pivot_row = r;
      }
    }
  }
  if(pivot_row < 0)
    return;
  pivot_counter++;
  printf("Pivoteo(%d)\n");
  canonize(mat, rows, cols, pivot_row, pivot_col);
}

int main(int argc, char* args[]){
    printf("Hello World!\n");
    
    double** mat = malloc(sizeof(double*)*SIZE_MAT);

    for(int i = 0; i < SIZE_MAT; i++)
        mat[i] = calloc(sizeof(double), SIZE_MAT);
    
    mat[0][0] = 1;
    mat[0][1] = -2;
    mat[1][0] = 2;
    mat[1][1] = 2;
    mat[1][2] = 2;
    mat[2][0] = 2;
    mat[2][1] = 2;
    mat[2][2] = 2;
  
    
    print_mat(mat);
    maximize(mat, 3, 3);
    print_mat(mat);
    for(int i = 0; i < SIZE_MAT; i++)
        free(mat[i]);
    free(mat);
    return 0;
}
